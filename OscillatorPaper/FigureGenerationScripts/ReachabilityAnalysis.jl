using Plots
using ReachabilityAnalysis

# include("../../UTILITIES/ODESystems.jl")

function fullmodel_ode!(du, u, p, t) #todo figure out @taylorize
    # u[1], u[2], u[3], u[4], u[5], u[6], u[7], u[8], u[9], u[10], u[11], u[12], u[13], u[14], u[15], u[16] = u #initial conditions
    # p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13] = p #parameters
    du[1] = p[2]*u[15] + p[12]*u[16] + p[2]*u[7] + p[2]*u[11] + p[12]*u[12] + p[12]*u[8] - p[1]*u[13]*u[1] - p[1]*u[2]*u[1] - p[1]*p[13]*u[1]*u[9] #* u[1]
    du[2] = p[2]*u[7] + p[7]*u[13] + p[3]*u[7] + p[7]*u[9] - p[6]*u[4]*u[2] - p[1]*u[2]*u[1] - p[6]*u[2]*u[6] #* u[2]
    du[3] = p[9]*u[14] + p[9]*u[10] + p[11]*u[8] + p[12]*u[8] - p[8]*u[4]*u[3] - p[10]*u[5]*u[3] - p[8]*u[6]*u[3] #* u[3]
    du[4] = p[5]*u[6] + p[7]*u[13] + p[7]*u[15] + p[9]*u[14] + p[9]*u[16] - p[4]*u[4]*u[5] - p[6]*u[4]*u[2] - p[6]*u[4]*u[7] - p[8]*u[4]*u[8] - p[8]*u[4]*u[3] #* u[4]
    du[5] = p[11]*u[16] + p[3]*u[15] + p[3]*u[7] + p[5]*u[6] + p[5]*u[9] + p[5]*u[11] + p[5]*u[10] + p[3]*u[11] + p[5]*u[12] + p[11]*u[12] + p[11]*u[8] - p[4]*u[4]*u[5] - p[4]*u[13]*u[5] - p[4]*u[14]*u[5] - p[10]*u[14]*u[5] - p[10]*u[5]*u[3] - p[4]*p[13]*u[15]*u[5] - p[4]*p[13]*u[16]*u[5] - p[10]*p[13]*u[5]*u[10] #* u[5]
    du[6] = p[7]*u[9] + p[7]*u[11] + p[9]*u[10] + p[9]*u[12] + p[4]*u[4]*u[5] - p[5]*u[6] - p[6]*u[2]*u[6] - p[8]*u[6]*u[3] - p[6]*p[13]*u[7]*u[6] - p[8]*p[13]*u[6]*u[8] #* u[6]
    du[7] = p[7]*u[15] + p[7]*u[11] + p[1]*u[2]*u[1] - p[2]*u[7] - p[3]*u[7] - p[6]*u[4]*u[7] - p[6]*p[13]*u[7]*u[6] #* u[7]
    du[8] = p[9]*u[16] + p[9]*u[12] + p[10]*u[5]*u[3] - p[11]*u[8] - p[12]*u[8] - p[8]*u[4]*u[8] - p[8]*p[13]*u[6]*u[8] #* u[8]
    du[9] = p[2]*u[11] + p[3]*u[11] + p[4]*u[13]*u[5] + p[6]*u[2]*u[6] - p[5]*u[9] - p[7]*u[9] - p[1]*p[13]*u[1]*u[9] #* u[9]
    du[10] = p[11]*u[12] + p[12]*u[12] + p[4]*u[14]*u[5] + p[8]*u[6]*u[3] - p[5]*u[10] - p[9]*u[10] - p[10]*p[13]*u[5]*u[10] #* u[10]
    du[11] = p[1]*p[13]*u[1]*u[9] + p[4]*p[13]*u[15]*u[5] + p[6]*p[13]*u[7]*u[6] - p[2]*u[11] - p[5]*u[11] - p[7]*u[11] - p[3]*u[11] #* u[11]
    du[12] = p[4]*p[13]*u[16]*u[5] + p[10]*p[13]*u[5]*u[10] + p[8]*p[13]*u[6]*u[8] - p[5]*u[12] - p[9]*u[12] - p[11]*u[12] - p[12]*u[12] #* u[12]
    du[13] = p[2]*u[15] + p[5]*u[9] + p[3]*u[15] + p[6]*u[4]*u[2] - p[7]*u[13] - p[1]*u[13]*u[1] - p[4]*u[13]*u[5] #* u[13]
    du[14] = p[5]*u[10] + p[11]*u[16] + p[12]*u[16] + p[8]*u[4]*u[3] - p[9]*u[14] - p[4]*u[14]*u[5] - p[10]*u[14]*u[5] #* u[14]
    du[15] = p[5]*u[11] + p[6]*u[4]*u[7] + p[1]*u[13]*u[1] - p[2]*u[15] - p[7]*u[15] - p[3]*u[15] - p[4]*p[13]*u[15]*u[5] #* u[15]
    du[16] = p[5]*u[12] + p[10]*u[14]*u[5] + p[8]*u[4]*u[8] - p[9]*u[16] - p[11]*u[16] - p[12]*u[16] - p[4]*p[13]*u[16]*u[5] #* u[16]
    du
end


function reachability_fullmodel_ode(; W=0.1)
    # initial states
    U0c = [0.0, 0.5, 0.3, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    U0 = Hyperrectangle(U0c, fill(W, length(U0c)))

    # initial-value problem
    ivprob = @ivp(u' = fullmodel_ode!(u), dim: 16, u(0) âˆˆ U0)

    return ivprob
end

ivprob = reachability_fullmodel_ode(W=0.01)

alg = TMJets(;abstol=1e-11, orderT=12, orderQ=1, adaptive=true)

sol1 = solve(ivprob; T=20.0, alg=alg)
sol1z = overapproximate(sol1, Zonotope)